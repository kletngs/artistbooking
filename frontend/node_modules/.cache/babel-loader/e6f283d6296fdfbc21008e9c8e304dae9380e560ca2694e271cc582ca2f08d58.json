{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '../config/apiConfig'; // Import the base URL\n\n// Login artist\nexport const loginArtist = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/artist/login`, {\n      email,\n      password\n    });\n    return response.data;\n  } catch (err) {\n    var _err$response;\n    throw ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || {\n      message: 'Login failed.'\n    };\n  }\n};\n\n// Fetch artist profile\nexport const fetchArtistProfile = async token => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/artist/me`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (err) {\n    var _err$response2;\n    throw ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || {\n      message: 'Failed to fetch artist profile.'\n    };\n  }\n};\n\n// Update artist availability\nexport const updateArtistAvailability = async (token, availability) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/artist/availability`, {\n      availability\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (err) {\n    var _err$response3;\n    throw ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || {\n      message: 'Failed to update availability.'\n    };\n  }\n};\n\n// Check availability\nexport const checkAvailability = async (artistId, date, startTime, endTime) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/artist/check-availability`, {\n      artistId,\n      date,\n      startTime,\n      endTime\n    });\n    return response.data;\n  } catch (err) {\n    var _err$response4;\n    throw ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.data) || {\n      message: 'Failed to check availability.'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","loginArtist","email","password","response","post","data","err","_err$response","message","fetchArtistProfile","token","get","headers","Authorization","_err$response2","updateArtistAvailability","availability","put","_err$response3","checkAvailability","artistId","date","startTime","endTime","_err$response4"],"sources":["C:/Users/slime/react/artistbooking/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_BASE_URL } from '../config/apiConfig'; // Import the base URL\r\n\r\n// Login artist\r\nexport const loginArtist = async (email, password) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE_URL}/auth/artist/login`, { email, password });\r\n        return response.data;\r\n    } catch (err) {\r\n        throw err.response?.data || { message: 'Login failed.' };\r\n    }\r\n};\r\n\r\n// Fetch artist profile\r\nexport const fetchArtistProfile = async (token) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/artist/me`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        return response.data;\r\n    } catch (err) {\r\n        throw err.response?.data || { message: 'Failed to fetch artist profile.' };\r\n    }\r\n};\r\n\r\n// Update artist availability\r\nexport const updateArtistAvailability = async (token, availability) => {\r\n    try {\r\n        const response = await axios.put(`${API_BASE_URL}/artist/availability`, { availability }, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        return response.data;\r\n    } catch (err) {\r\n        throw err.response?.data || { message: 'Failed to update availability.' };\r\n    }\r\n};\r\n\r\n// Check availability\r\nexport const checkAvailability = async (artistId, date, startTime, endTime) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE_URL}/artist/check-availability`, { artistId, date, startTime, endTime });\r\n        return response.data;\r\n    } catch (err) {\r\n        throw err.response?.data || { message: 'Failed to check availability.' };\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,qBAAqB,CAAC,CAAC;;AAEpD;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,oBAAoB,EAAE;MAAEE,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC3F,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAC,aAAA;IACV,MAAM,EAAAA,aAAA,GAAAD,GAAG,CAACH,QAAQ,cAAAI,aAAA,uBAAZA,aAAA,CAAcF,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAgB,CAAC;EAC5D;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;EAC/C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAML,KAAK,CAACa,GAAG,CAAC,GAAGZ,YAAY,YAAY,EAAE;MAC1Da,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUH,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAQ,cAAA;IACV,MAAM,EAAAA,cAAA,GAAAR,GAAG,CAACH,QAAQ,cAAAW,cAAA,uBAAZA,cAAA,CAAcT,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAkC,CAAC;EAC9E;AACJ,CAAC;;AAED;AACA,OAAO,MAAMO,wBAAwB,GAAG,MAAAA,CAAOL,KAAK,EAAEM,YAAY,KAAK;EACnE,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAML,KAAK,CAACmB,GAAG,CAAC,GAAGlB,YAAY,sBAAsB,EAAE;MAAEiB;IAAa,CAAC,EAAE;MACtFJ,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUH,KAAK;MAAG;IAChD,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAY,cAAA;IACV,MAAM,EAAAA,cAAA,GAAAZ,GAAG,CAACH,QAAQ,cAAAe,cAAA,uBAAZA,cAAA,CAAcb,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAiC,CAAC;EAC7E;AACJ,CAAC;;AAED;AACA,OAAO,MAAMW,iBAAiB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,EAAEC,OAAO,KAAK;EAC3E,IAAI;IACA,MAAMpB,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,4BAA4B,EAAE;MAAEqB,QAAQ;MAAEC,IAAI;MAAEC,SAAS;MAAEC;IAAQ,CAAC,CAAC;IACtH,OAAOpB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAkB,cAAA;IACV,MAAM,EAAAA,cAAA,GAAAlB,GAAG,CAACH,QAAQ,cAAAqB,cAAA,uBAAZA,cAAA,CAAcnB,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAgC,CAAC;EAC5E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}