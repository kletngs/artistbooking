{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\slime\\\\react\\\\artistbooking\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the AuthContext\nexport const useAuth = () => {\n  _s();\n  return React.useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [token, setToken] = useState(null);\n  const [artist, setArtist] = useState(null); // Renamed from \"user\" to \"artist\"\n\n  // Load token and artist data from localStorage on app initialization\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      console.log('Token found in localStorage:', storedToken);\n      setToken(storedToken); // Restore token\n\n      // Fetch artist data from the backend\n      const fetchArtistData = async () => {\n        try {\n          console.log('Fetching artist data from /api/artists/me...');\n          const response = await axios.get('/api/artists/me', {\n            headers: {\n              Authorization: `Bearer ${storedToken}`\n            }\n          });\n          console.log('Artist data fetched successfully:', response.data);\n          setArtist(response.data); // Restore artist data\n        } catch (err) {\n          var _err$response;\n          console.error('Failed to fetch artist data:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n          logout(); // Clear invalid session\n        }\n      };\n      fetchArtistData();\n    } else {\n      console.log('No token found in localStorage.');\n    }\n  }, []);\n\n  // Login function for artists\n  const login = artistData => {\n    console.log('Logging in artist:', artistData.artist);\n    setToken(artistData.token);\n    setArtist(artistData.artist); // Set artist data\n    localStorage.setItem('token', artistData.token); // Save token to localStorage\n  };\n\n  // Logout function\n  const logout = () => {\n    console.log('Logging out artist...');\n    setToken(null);\n    setArtist(null); // Clear artist data\n    localStorage.removeItem('token'); // Remove token from localStorage\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      artist,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"fndxOm89NcOVVMYhrXA7MQvCAWw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","useContext","AuthProvider","children","_s2","token","setToken","artist","setArtist","storedToken","localStorage","getItem","console","log","fetchArtistData","response","get","headers","Authorization","data","err","_err$response","error","message","logout","login","artistData","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/slime/react/artistbooking/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n    return React.useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [token, setToken] = useState(null);\r\n    const [artist, setArtist] = useState(null); // Renamed from \"user\" to \"artist\"\r\n\r\n    // Load token and artist data from localStorage on app initialization\r\n    useEffect(() => {\r\n        const storedToken = localStorage.getItem('token');\r\n        if (storedToken) {\r\n            console.log('Token found in localStorage:', storedToken);\r\n            setToken(storedToken); // Restore token\r\n\r\n            // Fetch artist data from the backend\r\n            const fetchArtistData = async () => {\r\n                try {\r\n                    console.log('Fetching artist data from /api/artists/me...');\r\n                    const response = await axios.get('/api/artists/me', {\r\n                        headers: { Authorization: `Bearer ${storedToken}` },\r\n                    });\r\n                    console.log('Artist data fetched successfully:', response.data);\r\n                    setArtist(response.data); // Restore artist data\r\n                } catch (err) {\r\n                    console.error('Failed to fetch artist data:', err.response?.data || err.message);\r\n                    logout(); // Clear invalid session\r\n                }\r\n            };\r\n\r\n            fetchArtistData();\r\n        } else {\r\n            console.log('No token found in localStorage.');\r\n        }\r\n    }, []);\r\n\r\n    // Login function for artists\r\n    const login = (artistData) => {\r\n        console.log('Logging in artist:', artistData.artist);\r\n        setToken(artistData.token);\r\n        setArtist(artistData.artist); // Set artist data\r\n        localStorage.setItem('token', artistData.token); // Save token to localStorage\r\n    };\r\n\r\n    // Logout function\r\n    const logout = () => {\r\n        console.log('Logging out artist...');\r\n        setToken(null);\r\n        setArtist(null); // Clear artist data\r\n        localStorage.removeItem('token'); // Remove token from localStorage\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ token, artist, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}