{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\slime\\\\react\\\\artistbooking\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(null);\n  const [user, setUser] = useState(null);\n\n  // Function to log in the user\n  const login = async userData => {\n    const {\n      token,\n      user\n    } = userData;\n    setToken(token);\n    setUser(user);\n    localStorage.setItem('token', token); // Save token to localStorage\n  };\n\n  // Function to log out the user\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token'); // Remove token from localStorage\n  };\n\n  // Verify token and restore user session on app load\n  useEffect(() => {\n    const verifyToken = async () => {\n      const storedToken = localStorage.getItem('token');\n      if (storedToken) {\n        setToken(storedToken); // Set token in state\n        try {\n          const response = await axios.get('/api/auth/me', {\n            headers: {\n              Authorization: `Bearer ${storedToken}`\n            }\n          });\n          setUser(response.data); // Restore user data\n        } catch (err) {\n          console.error('Token verification failed:', err.message);\n          logout(); // Log out if token is invalid\n        }\n      }\n    };\n    verifyToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"lTc4oKMP/OVEHM3fW8W5olMCd7E=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","user","setUser","login","userData","localStorage","setItem","logout","removeItem","verifyToken","storedToken","getItem","response","get","headers","Authorization","data","err","console","error","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/slime/react/artistbooking/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [token, setToken] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n\r\n    // Function to log in the user\r\n    const login = async (userData) => {\r\n        const { token, user } = userData;\r\n        setToken(token);\r\n        setUser(user);\r\n        localStorage.setItem('token', token); // Save token to localStorage\r\n    };\r\n\r\n    // Function to log out the user\r\n    const logout = () => {\r\n        setToken(null);\r\n        setUser(null);\r\n        localStorage.removeItem('token'); // Remove token from localStorage\r\n    };\r\n\r\n    // Verify token and restore user session on app load\r\n    useEffect(() => {\r\n        const verifyToken = async () => {\r\n            const storedToken = localStorage.getItem('token');\r\n            if (storedToken) {\r\n                setToken(storedToken); // Set token in state\r\n                try {\r\n                    const response = await axios.get('/api/auth/me', {\r\n                        headers: { Authorization: `Bearer ${storedToken}` },\r\n                    });\r\n                    setUser(response.data); // Restore user data\r\n                } catch (err) {\r\n                    console.error('Token verification failed:', err.message);\r\n                    logout(); // Log out if token is invalid\r\n                }\r\n            }\r\n        };\r\n\r\n        verifyToken();\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ token, user, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMa,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAC9B,MAAM;MAAEL,KAAK;MAAEE;IAAK,CAAC,GAAGG,QAAQ;IAChCJ,QAAQ,CAACD,KAAK,CAAC;IACfG,OAAO,CAACD,IAAI,CAAC;IACbI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC,CAAC,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACjBP,QAAQ,CAAC,IAAI,CAAC;IACdE,OAAO,CAAC,IAAI,CAAC;IACbG,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACtC,CAAC;;EAED;EACAjB,SAAS,CAAC,MAAM;IACZ,MAAMkB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,WAAW,GAAGL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;MACjD,IAAID,WAAW,EAAE;QACbV,QAAQ,CAACU,WAAW,CAAC,CAAC,CAAC;QACvB,IAAI;UACA,MAAME,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAC,cAAc,EAAE;YAC7CC,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAUL,WAAW;YAAG;UACtD,CAAC,CAAC;UACFR,OAAO,CAACU,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;UACVC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,GAAG,CAACG,OAAO,CAAC;UACxDb,MAAM,CAAC,CAAC,CAAC,CAAC;QACd;MACJ;IACJ,CAAC;IAEDE,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIf,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,KAAK;MAAEE,IAAI;MAAEE,KAAK;MAAEI;IAAO,CAAE;IAAAV,QAAA,EACvDA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC5B,EAAA,CA7CWF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}