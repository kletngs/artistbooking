{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\slime\\\\react\\\\artistbooking\\\\frontend\\\\src\\\\components\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext'; // Updated path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  children,\n  allowedRoles\n}) => {\n  _s();\n  const {\n    user,\n    loading\n  } = useContext(AuthContext);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this); // Show a loading spinner while checking auth status\n  }\n  if (!user || !allowedRoles.includes(user.role)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this); // Redirect unauthorized users to the login page\n  }\n  return children; // Render the protected route\n};\n_s(PrivateRoute, \"nVcmz/Z77NEMBy/UMVDV0Kci2eI=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","useContext","AuthContext","jsxDEV","_jsxDEV","PrivateRoute","children","allowedRoles","_s","user","loading","fileName","_jsxFileName","lineNumber","columnNumber","includes","role","to","_c","$RefreshReg$"],"sources":["C:/Users/slime/react/artistbooking/frontend/src/components/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext'; // Updated path\r\n\r\nconst PrivateRoute = ({ children, allowedRoles }) => {\r\n    const { user, loading } = useContext(AuthContext);\r\n\r\n    if (loading) {\r\n        return <p>Loading...</p>; // Show a loading spinner while checking auth status\r\n    }\r\n\r\n    if (!user || !allowedRoles.includes(user.role)) {\r\n        return <Navigate to=\"/login\" />; // Redirect unauthorized users to the login page\r\n    }\r\n\r\n    return children; // Render the protected route\r\n};\r\n\r\nexport default PrivateRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGT,UAAU,CAACC,WAAW,CAAC;EAEjD,IAAIQ,OAAO,EAAE;IACT,oBAAON,OAAA;MAAAE,QAAA,EAAG;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAC9B;EAEA,IAAI,CAACL,IAAI,IAAI,CAACF,YAAY,CAACQ,QAAQ,CAACN,IAAI,CAACO,IAAI,CAAC,EAAE;IAC5C,oBAAOZ,OAAA,CAACJ,QAAQ;MAACiB,EAAE,EAAC;IAAQ;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EACrC;EAEA,OAAOR,QAAQ,CAAC,CAAC;AACrB,CAAC;AAACE,EAAA,CAZIH,YAAY;AAAAa,EAAA,GAAZb,YAAY;AAclB,eAAeA,YAAY;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}