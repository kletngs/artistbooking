{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\slime\\\\react\\\\artistbooking\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return React.useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [token, setToken] = useState(null);\n  const [user, setUser] = useState(null);\n\n  // Load token and user data from localStorage on app initialization\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      setToken(storedToken); // Restore token\n\n      // Fetch user data from the backend\n      const fetchUserData = async () => {\n        try {\n          const response = await axios.get('/api/auth/me', {\n            headers: {\n              Authorization: `Bearer ${storedToken}`\n            }\n          });\n          setUser(response.data); // Restore user data\n        } catch (err) {\n          logout(); // Clear invalid session\n        }\n      };\n      fetchUserData();\n    }\n  }, []);\n  const login = userData => {\n    setToken(userData.token);\n    setUser(userData.user);\n    localStorage.setItem('token', userData.token); // Save token to localStorage\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token'); // Remove token from localStorage\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"lTc4oKMP/OVEHM3fW8W5olMCd7E=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","useContext","AuthProvider","children","_s2","token","setToken","user","setUser","storedToken","localStorage","getItem","fetchUserData","response","get","headers","Authorization","data","err","logout","login","userData","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/slime/react/artistbooking/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n    return React.useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [token, setToken] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n\r\n    // Load token and user data from localStorage on app initialization\r\n    useEffect(() => {\r\n        const storedToken = localStorage.getItem('token');\r\n        if (storedToken) {\r\n            setToken(storedToken); // Restore token\r\n\r\n            // Fetch user data from the backend\r\n            const fetchUserData = async () => {\r\n                try {\r\n                    const response = await axios.get('/api/auth/me', {\r\n                        headers: { Authorization: `Bearer ${storedToken}` },\r\n                    });\r\n                    setUser(response.data); // Restore user data\r\n                } catch (err) {\r\n                    logout(); // Clear invalid session\r\n                }\r\n            };\r\n\r\n            fetchUserData();\r\n        }\r\n    }, []);\r\n\r\n    const login = (userData) => {\r\n        setToken(userData.token);\r\n        setUser(userData.user);\r\n        localStorage.setItem('token', userData.token); // Save token to localStorage\r\n    };\r\n\r\n    const logout = () => {\r\n        setToken(null);\r\n        setUser(null);\r\n        localStorage.removeItem('token'); // Remove token from localStorage\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ token, user, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,OAAOT,KAAK,CAACU,UAAU,CAACH,WAAW,CAAC;AACxC,CAAC;AAACE,EAAA,CAFWD,OAAO;AAIpB,OAAO,MAAMG,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMe,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,WAAW,EAAE;MACbH,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC;;MAEvB;MACA,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;QAC9B,IAAI;UACA,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,cAAc,EAAE;YAC7CC,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAUP,WAAW;YAAG;UACtD,CAAC,CAAC;UACFD,OAAO,CAACK,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;UACVC,MAAM,CAAC,CAAC,CAAC,CAAC;QACd;MACJ,CAAC;MAEDP,aAAa,CAAC,CAAC;IACnB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,KAAK,GAAIC,QAAQ,IAAK;IACxBf,QAAQ,CAACe,QAAQ,CAAChB,KAAK,CAAC;IACxBG,OAAO,CAACa,QAAQ,CAACd,IAAI,CAAC;IACtBG,YAAY,CAACY,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAChB,KAAK,CAAC,CAAC,CAAC;EACnD,CAAC;EAED,MAAMc,MAAM,GAAGA,CAAA,KAAM;IACjBb,QAAQ,CAAC,IAAI,CAAC;IACdE,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACtC,CAAC;EAED,oBACI1B,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEpB,KAAK;MAAEE,IAAI;MAAEa,KAAK;MAAED;IAAO,CAAE;IAAAhB,QAAA,EACvDA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACzB,GAAA,CA3CWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}